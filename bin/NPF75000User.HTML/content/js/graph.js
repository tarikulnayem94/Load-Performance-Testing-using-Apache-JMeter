/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 191853.0, "series": [{"data": [[0.0, 1.0], [0.1, 5.0], [0.2, 5.0], [0.3, 5.0], [0.4, 5.0], [0.5, 5.0], [0.6, 5.0], [0.7, 5.0], [0.8, 5.0], [0.9, 5.0], [1.0, 5.0], [1.1, 5.0], [1.2, 5.0], [1.3, 5.0], [1.4, 5.0], [1.5, 5.0], [1.6, 5.0], [1.7, 5.0], [1.8, 5.0], [1.9, 5.0], [2.0, 6.0], [2.1, 6.0], [2.2, 6.0], [2.3, 6.0], [2.4, 6.0], [2.5, 6.0], [2.6, 6.0], [2.7, 6.0], [2.8, 6.0], [2.9, 6.0], [3.0, 6.0], [3.1, 6.0], [3.2, 6.0], [3.3, 6.0], [3.4, 6.0], [3.5, 6.0], [3.6, 6.0], [3.7, 6.0], [3.8, 6.0], [3.9, 6.0], [4.0, 6.0], [4.1, 6.0], [4.2, 6.0], [4.3, 6.0], [4.4, 6.0], [4.5, 6.0], [4.6, 6.0], [4.7, 6.0], [4.8, 6.0], [4.9, 6.0], [5.0, 6.0], [5.1, 6.0], [5.2, 6.0], [5.3, 6.0], [5.4, 6.0], [5.5, 6.0], [5.6, 6.0], [5.7, 6.0], [5.8, 6.0], [5.9, 6.0], [6.0, 6.0], [6.1, 6.0], [6.2, 6.0], [6.3, 6.0], [6.4, 6.0], [6.5, 6.0], [6.6, 6.0], [6.7, 6.0], [6.8, 6.0], [6.9, 6.0], [7.0, 6.0], [7.1, 6.0], [7.2, 6.0], [7.3, 6.0], [7.4, 6.0], [7.5, 6.0], [7.6, 6.0], [7.7, 6.0], [7.8, 6.0], [7.9, 6.0], [8.0, 6.0], [8.1, 6.0], [8.2, 6.0], [8.3, 6.0], [8.4, 6.0], [8.5, 6.0], [8.6, 6.0], [8.7, 6.0], [8.8, 6.0], [8.9, 6.0], [9.0, 6.0], [9.1, 6.0], [9.2, 6.0], [9.3, 6.0], [9.4, 6.0], [9.5, 6.0], [9.6, 6.0], [9.7, 6.0], [9.8, 6.0], [9.9, 6.0], [10.0, 6.0], [10.1, 6.0], [10.2, 6.0], [10.3, 6.0], [10.4, 6.0], [10.5, 6.0], [10.6, 6.0], [10.7, 6.0], [10.8, 6.0], [10.9, 7.0], [11.0, 7.0], [11.1, 7.0], [11.2, 7.0], [11.3, 7.0], [11.4, 7.0], [11.5, 7.0], [11.6, 7.0], [11.7, 7.0], [11.8, 7.0], [11.9, 7.0], [12.0, 7.0], [12.1, 7.0], [12.2, 7.0], [12.3, 7.0], [12.4, 7.0], [12.5, 7.0], [12.6, 7.0], [12.7, 7.0], [12.8, 7.0], [12.9, 7.0], [13.0, 7.0], [13.1, 7.0], [13.2, 7.0], [13.3, 7.0], [13.4, 7.0], [13.5, 7.0], [13.6, 7.0], [13.7, 7.0], [13.8, 7.0], [13.9, 7.0], [14.0, 7.0], [14.1, 7.0], [14.2, 7.0], [14.3, 7.0], [14.4, 7.0], [14.5, 7.0], [14.6, 7.0], [14.7, 7.0], [14.8, 7.0], [14.9, 7.0], [15.0, 7.0], [15.1, 7.0], [15.2, 7.0], [15.3, 7.0], [15.4, 7.0], [15.5, 7.0], [15.6, 7.0], [15.7, 7.0], [15.8, 7.0], [15.9, 7.0], [16.0, 7.0], [16.1, 7.0], [16.2, 7.0], [16.3, 7.0], [16.4, 7.0], [16.5, 7.0], [16.6, 7.0], [16.7, 7.0], [16.8, 7.0], [16.9, 7.0], [17.0, 7.0], [17.1, 7.0], [17.2, 7.0], [17.3, 7.0], [17.4, 7.0], [17.5, 7.0], [17.6, 7.0], [17.7, 7.0], [17.8, 7.0], [17.9, 7.0], [18.0, 7.0], [18.1, 7.0], [18.2, 7.0], [18.3, 7.0], [18.4, 7.0], [18.5, 7.0], [18.6, 7.0], [18.7, 7.0], [18.8, 7.0], [18.9, 7.0], [19.0, 7.0], [19.1, 7.0], [19.2, 7.0], [19.3, 7.0], [19.4, 7.0], [19.5, 7.0], [19.6, 7.0], [19.7, 7.0], [19.8, 8.0], [19.9, 8.0], [20.0, 8.0], [20.1, 8.0], [20.2, 8.0], [20.3, 8.0], [20.4, 8.0], [20.5, 8.0], [20.6, 8.0], [20.7, 8.0], [20.8, 8.0], [20.9, 8.0], [21.0, 8.0], [21.1, 8.0], [21.2, 8.0], [21.3, 8.0], [21.4, 8.0], [21.5, 8.0], [21.6, 8.0], [21.7, 8.0], [21.8, 8.0], [21.9, 8.0], [22.0, 8.0], [22.1, 8.0], [22.2, 8.0], [22.3, 8.0], [22.4, 8.0], [22.5, 8.0], [22.6, 8.0], [22.7, 8.0], [22.8, 8.0], [22.9, 8.0], [23.0, 8.0], [23.1, 8.0], [23.2, 8.0], [23.3, 8.0], [23.4, 8.0], [23.5, 8.0], [23.6, 8.0], [23.7, 8.0], [23.8, 8.0], [23.9, 8.0], [24.0, 8.0], [24.1, 8.0], [24.2, 8.0], [24.3, 8.0], [24.4, 8.0], [24.5, 8.0], [24.6, 8.0], [24.7, 8.0], [24.8, 8.0], [24.9, 8.0], [25.0, 8.0], [25.1, 8.0], [25.2, 8.0], [25.3, 8.0], [25.4, 8.0], [25.5, 8.0], [25.6, 9.0], [25.7, 9.0], [25.8, 9.0], [25.9, 9.0], [26.0, 9.0], [26.1, 9.0], [26.2, 9.0], [26.3, 9.0], [26.4, 9.0], [26.5, 9.0], [26.6, 9.0], [26.7, 9.0], [26.8, 9.0], [26.9, 9.0], [27.0, 9.0], [27.1, 9.0], [27.2, 9.0], [27.3, 9.0], [27.4, 9.0], [27.5, 9.0], [27.6, 9.0], [27.7, 9.0], [27.8, 9.0], [27.9, 9.0], [28.0, 9.0], [28.1, 9.0], [28.2, 9.0], [28.3, 9.0], [28.4, 9.0], [28.5, 9.0], [28.6, 9.0], [28.7, 9.0], [28.8, 9.0], [28.9, 9.0], [29.0, 9.0], [29.1, 9.0], [29.2, 9.0], [29.3, 9.0], [29.4, 9.0], [29.5, 9.0], [29.6, 9.0], [29.7, 10.0], [29.8, 10.0], [29.9, 10.0], [30.0, 10.0], [30.1, 10.0], [30.2, 10.0], [30.3, 10.0], [30.4, 10.0], [30.5, 10.0], [30.6, 10.0], [30.7, 10.0], [30.8, 10.0], [30.9, 10.0], [31.0, 10.0], [31.1, 10.0], [31.2, 10.0], [31.3, 10.0], [31.4, 10.0], [31.5, 10.0], [31.6, 10.0], [31.7, 10.0], [31.8, 10.0], [31.9, 10.0], [32.0, 10.0], [32.1, 10.0], [32.2, 10.0], [32.3, 10.0], [32.4, 10.0], [32.5, 10.0], [32.6, 10.0], [32.7, 10.0], [32.8, 10.0], [32.9, 10.0], [33.0, 10.0], [33.1, 10.0], [33.2, 11.0], [33.3, 11.0], [33.4, 11.0], [33.5, 11.0], [33.6, 11.0], [33.7, 11.0], [33.8, 11.0], [33.9, 11.0], [34.0, 11.0], [34.1, 11.0], [34.2, 11.0], [34.3, 11.0], [34.4, 11.0], [34.5, 11.0], [34.6, 11.0], [34.7, 11.0], [34.8, 11.0], [34.9, 11.0], [35.0, 11.0], [35.1, 11.0], [35.2, 11.0], [35.3, 11.0], [35.4, 11.0], [35.5, 11.0], [35.6, 11.0], [35.7, 11.0], [35.8, 11.0], [35.9, 11.0], [36.0, 11.0], [36.1, 11.0], [36.2, 11.0], [36.3, 11.0], [36.4, 11.0], [36.5, 11.0], [36.6, 11.0], [36.7, 12.0], [36.8, 12.0], [36.9, 12.0], [37.0, 12.0], [37.1, 12.0], [37.2, 12.0], [37.3, 12.0], [37.4, 12.0], [37.5, 12.0], [37.6, 12.0], [37.7, 12.0], [37.8, 12.0], [37.9, 12.0], [38.0, 12.0], [38.1, 12.0], [38.2, 12.0], [38.3, 12.0], [38.4, 12.0], [38.5, 12.0], [38.6, 12.0], [38.7, 12.0], [38.8, 12.0], [38.9, 12.0], [39.0, 12.0], [39.1, 12.0], [39.2, 12.0], [39.3, 12.0], [39.4, 12.0], [39.5, 12.0], [39.6, 12.0], [39.7, 12.0], [39.8, 12.0], [39.9, 12.0], [40.0, 12.0], [40.1, 12.0], [40.2, 12.0], [40.3, 12.0], [40.4, 13.0], [40.5, 13.0], [40.6, 13.0], [40.7, 13.0], [40.8, 13.0], [40.9, 13.0], [41.0, 13.0], [41.1, 13.0], [41.2, 13.0], [41.3, 13.0], [41.4, 13.0], [41.5, 13.0], [41.6, 13.0], [41.7, 13.0], [41.8, 13.0], [41.9, 13.0], [42.0, 13.0], [42.1, 13.0], [42.2, 13.0], [42.3, 13.0], [42.4, 13.0], [42.5, 13.0], [42.6, 13.0], [42.7, 14.0], [42.8, 14.0], [42.9, 14.0], [43.0, 14.0], [43.1, 14.0], [43.2, 14.0], [43.3, 14.0], [43.4, 14.0], [43.5, 14.0], [43.6, 14.0], [43.7, 14.0], [43.8, 14.0], [43.9, 14.0], [44.0, 14.0], [44.1, 14.0], [44.2, 14.0], [44.3, 15.0], [44.4, 15.0], [44.5, 15.0], [44.6, 15.0], [44.7, 15.0], [44.8, 15.0], [44.9, 15.0], [45.0, 15.0], [45.1, 15.0], [45.2, 15.0], [45.3, 15.0], [45.4, 15.0], [45.5, 15.0], [45.6, 16.0], [45.7, 16.0], [45.8, 16.0], [45.9, 16.0], [46.0, 16.0], [46.1, 16.0], [46.2, 16.0], [46.3, 16.0], [46.4, 16.0], [46.5, 16.0], [46.6, 17.0], [46.7, 17.0], [46.8, 17.0], [46.9, 17.0], [47.0, 17.0], [47.1, 17.0], [47.2, 17.0], [47.3, 17.0], [47.4, 17.0], [47.5, 18.0], [47.6, 18.0], [47.7, 18.0], [47.8, 18.0], [47.9, 18.0], [48.0, 18.0], [48.1, 18.0], [48.2, 18.0], [48.3, 19.0], [48.4, 19.0], [48.5, 19.0], [48.6, 19.0], [48.7, 19.0], [48.8, 19.0], [48.9, 19.0], [49.0, 20.0], [49.1, 20.0], [49.2, 20.0], [49.3, 20.0], [49.4, 20.0], [49.5, 20.0], [49.6, 20.0], [49.7, 21.0], [49.8, 21.0], [49.9, 21.0], [50.0, 21.0], [50.1, 21.0], [50.2, 22.0], [50.3, 22.0], [50.4, 22.0], [50.5, 22.0], [50.6, 22.0], [50.7, 23.0], [50.8, 23.0], [50.9, 23.0], [51.0, 23.0], [51.1, 23.0], [51.2, 24.0], [51.3, 24.0], [51.4, 24.0], [51.5, 24.0], [51.6, 24.0], [51.7, 25.0], [51.8, 25.0], [51.9, 25.0], [52.0, 25.0], [52.1, 26.0], [52.2, 26.0], [52.3, 26.0], [52.4, 27.0], [52.5, 27.0], [52.6, 27.0], [52.7, 28.0], [52.8, 28.0], [52.9, 28.0], [53.0, 28.0], [53.1, 29.0], [53.2, 29.0], [53.3, 29.0], [53.4, 30.0], [53.5, 30.0], [53.6, 30.0], [53.7, 31.0], [53.8, 31.0], [53.9, 31.0], [54.0, 32.0], [54.1, 32.0], [54.2, 33.0], [54.3, 33.0], [54.4, 33.0], [54.5, 34.0], [54.6, 34.0], [54.7, 35.0], [54.8, 35.0], [54.9, 35.0], [55.0, 36.0], [55.1, 36.0], [55.2, 37.0], [55.3, 37.0], [55.4, 38.0], [55.5, 38.0], [55.6, 39.0], [55.7, 39.0], [55.8, 40.0], [55.9, 41.0], [56.0, 41.0], [56.1, 42.0], [56.2, 43.0], [56.3, 43.0], [56.4, 44.0], [56.5, 45.0], [56.6, 46.0], [56.7, 46.0], [56.8, 46.0], [56.9, 46.0], [57.0, 47.0], [57.1, 47.0], [57.2, 47.0], [57.3, 47.0], [57.4, 47.0], [57.5, 47.0], [57.6, 47.0], [57.7, 47.0], [57.8, 47.0], [57.9, 47.0], [58.0, 47.0], [58.1, 47.0], [58.2, 47.0], [58.3, 47.0], [58.4, 47.0], [58.5, 47.0], [58.6, 47.0], [58.7, 47.0], [58.8, 47.0], [58.9, 47.0], [59.0, 47.0], [59.1, 47.0], [59.2, 47.0], [59.3, 47.0], [59.4, 47.0], [59.5, 47.0], [59.6, 47.0], [59.7, 47.0], [59.8, 47.0], [59.9, 47.0], [60.0, 47.0], [60.1, 48.0], [60.2, 48.0], [60.3, 48.0], [60.4, 48.0], [60.5, 48.0], [60.6, 48.0], [60.7, 48.0], [60.8, 48.0], [60.9, 48.0], [61.0, 48.0], [61.1, 48.0], [61.2, 48.0], [61.3, 48.0], [61.4, 48.0], [61.5, 48.0], [61.6, 48.0], [61.7, 48.0], [61.8, 48.0], [61.9, 48.0], [62.0, 48.0], [62.1, 48.0], [62.2, 48.0], [62.3, 48.0], [62.4, 48.0], [62.5, 48.0], [62.6, 48.0], [62.7, 48.0], [62.8, 48.0], [62.9, 48.0], [63.0, 48.0], [63.1, 49.0], [63.2, 49.0], [63.3, 49.0], [63.4, 49.0], [63.5, 49.0], [63.6, 49.0], [63.7, 49.0], [63.8, 49.0], [63.9, 50.0], [64.0, 50.0], [64.1, 50.0], [64.2, 50.0], [64.3, 51.0], [64.4, 51.0], [64.5, 52.0], [64.6, 53.0], [64.7, 54.0], [64.8, 56.0], [64.9, 57.0], [65.0, 59.0], [65.1, 61.0], [65.2, 63.0], [65.3, 65.0], [65.4, 67.0], [65.5, 69.0], [65.6, 71.0], [65.7, 74.0], [65.8, 76.0], [65.9, 78.0], [66.0, 81.0], [66.1, 83.0], [66.2, 85.0], [66.3, 88.0], [66.4, 90.0], [66.5, 91.0], [66.6, 91.0], [66.7, 92.0], [66.8, 92.0], [66.9, 92.0], [67.0, 92.0], [67.1, 92.0], [67.2, 92.0], [67.3, 92.0], [67.4, 92.0], [67.5, 92.0], [67.6, 92.0], [67.7, 92.0], [67.8, 92.0], [67.9, 92.0], [68.0, 92.0], [68.1, 92.0], [68.2, 93.0], [68.3, 93.0], [68.4, 93.0], [68.5, 93.0], [68.6, 93.0], [68.7, 93.0], [68.8, 93.0], [68.9, 93.0], [69.0, 93.0], [69.1, 93.0], [69.2, 93.0], [69.3, 93.0], [69.4, 93.0], [69.5, 93.0], [69.6, 93.0], [69.7, 93.0], [69.8, 93.0], [69.9, 93.0], [70.0, 93.0], [70.1, 93.0], [70.2, 93.0], [70.3, 93.0], [70.4, 93.0], [70.5, 94.0], [70.6, 94.0], [70.7, 94.0], [70.8, 94.0], [70.9, 94.0], [71.0, 94.0], [71.1, 94.0], [71.2, 94.0], [71.3, 94.0], [71.4, 94.0], [71.5, 94.0], [71.6, 94.0], [71.7, 94.0], [71.8, 94.0], [71.9, 94.0], [72.0, 94.0], [72.1, 94.0], [72.2, 94.0], [72.3, 94.0], [72.4, 94.0], [72.5, 94.0], [72.6, 94.0], [72.7, 94.0], [72.8, 94.0], [72.9, 94.0], [73.0, 94.0], [73.1, 94.0], [73.2, 95.0], [73.3, 95.0], [73.4, 95.0], [73.5, 95.0], [73.6, 95.0], [73.7, 95.0], [73.8, 95.0], [73.9, 95.0], [74.0, 95.0], [74.1, 95.0], [74.2, 95.0], [74.3, 95.0], [74.4, 95.0], [74.5, 95.0], [74.6, 95.0], [74.7, 95.0], [74.8, 95.0], [74.9, 95.0], [75.0, 95.0], [75.1, 95.0], [75.2, 95.0], [75.3, 95.0], [75.4, 95.0], [75.5, 95.0], [75.6, 95.0], [75.7, 95.0], [75.8, 95.0], [75.9, 96.0], [76.0, 96.0], [76.1, 96.0], [76.2, 96.0], [76.3, 96.0], [76.4, 96.0], [76.5, 96.0], [76.6, 96.0], [76.7, 96.0], [76.8, 96.0], [76.9, 96.0], [77.0, 96.0], [77.1, 96.0], [77.2, 96.0], [77.3, 96.0], [77.4, 96.0], [77.5, 97.0], [77.6, 97.0], [77.7, 97.0], [77.8, 97.0], [77.9, 97.0], [78.0, 97.0], [78.1, 97.0], [78.2, 97.0], [78.3, 97.0], [78.4, 98.0], [78.5, 98.0], [78.6, 98.0], [78.7, 98.0], [78.8, 98.0], [78.9, 99.0], [79.0, 99.0], [79.1, 100.0], [79.2, 100.0], [79.3, 101.0], [79.4, 102.0], [79.5, 103.0], [79.6, 104.0], [79.7, 105.0], [79.8, 107.0], [79.9, 108.0], [80.0, 109.0], [80.1, 110.0], [80.2, 112.0], [80.3, 113.0], [80.4, 114.0], [80.5, 116.0], [80.6, 116.0], [80.7, 117.0], [80.8, 118.0], [80.9, 119.0], [81.0, 120.0], [81.1, 121.0], [81.2, 122.0], [81.3, 124.0], [81.4, 125.0], [81.5, 126.0], [81.6, 126.0], [81.7, 127.0], [81.8, 128.0], [81.9, 131.0], [82.0, 139.0], [82.1, 143.0], [82.2, 145.0], [82.3, 146.0], [82.4, 147.0], [82.5, 148.0], [82.6, 149.0], [82.7, 151.0], [82.8, 153.0], [82.9, 156.0], [83.0, 159.0], [83.1, 162.0], [83.2, 164.0], [83.3, 167.0], [83.4, 170.0], [83.5, 172.0], [83.6, 175.0], [83.7, 177.0], [83.8, 180.0], [83.9, 182.0], [84.0, 185.0], [84.1, 186.0], [84.2, 188.0], [84.3, 190.0], [84.4, 191.0], [84.5, 193.0], [84.6, 194.0], [84.7, 196.0], [84.8, 197.0], [84.9, 198.0], [85.0, 200.0], [85.1, 201.0], [85.2, 202.0], [85.3, 203.0], [85.4, 204.0], [85.5, 205.0], [85.6, 206.0], [85.7, 207.0], [85.8, 208.0], [85.9, 209.0], [86.0, 210.0], [86.1, 210.0], [86.2, 212.0], [86.3, 212.0], [86.4, 213.0], [86.5, 214.0], [86.6, 215.0], [86.7, 216.0], [86.8, 217.0], [86.9, 217.0], [87.0, 218.0], [87.1, 218.0], [87.2, 219.0], [87.3, 220.0], [87.4, 220.0], [87.5, 221.0], [87.6, 222.0], [87.7, 222.0], [87.8, 223.0], [87.9, 223.0], [88.0, 224.0], [88.1, 225.0], [88.2, 225.0], [88.3, 226.0], [88.4, 226.0], [88.5, 227.0], [88.6, 227.0], [88.7, 228.0], [88.8, 228.0], [88.9, 229.0], [89.0, 230.0], [89.1, 230.0], [89.2, 231.0], [89.3, 231.0], [89.4, 232.0], [89.5, 232.0], [89.6, 233.0], [89.7, 233.0], [89.8, 234.0], [89.9, 235.0], [90.0, 235.0], [90.1, 236.0], [90.2, 236.0], [90.3, 237.0], [90.4, 237.0], [90.5, 238.0], [90.6, 238.0], [90.7, 239.0], [90.8, 239.0], [90.9, 239.0], [91.0, 240.0], [91.1, 240.0], [91.2, 241.0], [91.3, 241.0], [91.4, 242.0], [91.5, 243.0], [91.6, 243.0], [91.7, 244.0], [91.8, 245.0], [91.9, 245.0], [92.0, 246.0], [92.1, 247.0], [92.2, 248.0], [92.3, 249.0], [92.4, 249.0], [92.5, 250.0], [92.6, 251.0], [92.7, 253.0], [92.8, 255.0], [92.9, 260.0], [93.0, 274.0], [93.1, 292.0], [93.2, 305.0], [93.3, 325.0], [93.4, 349.0], [93.5, 365.0], [93.6, 372.0], [93.7, 375.0], [93.8, 378.0], [93.9, 380.0], [94.0, 383.0], [94.1, 389.0], [94.2, 405.0], [94.3, 443.0], [94.4, 496.0], [94.5, 504.0], [94.6, 516.0], [94.7, 529.0], [94.8, 542.0], [94.9, 552.0], [95.0, 566.0], [95.1, 588.0], [95.2, 617.0], [95.3, 646.0], [95.4, 669.0], [95.5, 679.0], [95.6, 691.0], [95.7, 715.0], [95.8, 747.0], [95.9, 766.0], [96.0, 779.0], [96.1, 802.0], [96.2, 832.0], [96.3, 847.0], [96.4, 861.0], [96.5, 886.0], [96.6, 910.0], [96.7, 962.0], [96.8, 1003.0], [96.9, 1026.0], [97.0, 1051.0], [97.1, 1102.0], [97.2, 1142.0], [97.3, 1175.0], [97.4, 1200.0], [97.5, 1221.0], [97.6, 1234.0], [97.7, 1246.0], [97.8, 1259.0], [97.9, 1300.0], [98.0, 1365.0], [98.1, 1477.0], [98.2, 1594.0], [98.3, 1724.0], [98.4, 1878.0], [98.5, 2041.0], [98.6, 2243.0], [98.7, 2258.0], [98.8, 2266.0], [98.9, 2290.0], [99.0, 3072.0], [99.1, 3448.0], [99.2, 5240.0], [99.3, 6444.0], [99.4, 12156.0], [99.5, 17287.0], [99.6, 24967.0], [99.7, 27835.0], [99.8, 29096.0], [99.9, 52995.0]], "isOverall": false, "label": "Domain Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 99840.0, "series": [{"data": [[0.0, 99840.0], [152100.0, 1.0], [68300.0, 1.0], [85900.0, 1.0], [90700.0, 1.0], [95500.0, 1.0], [100.0, 7487.0], [41700.0, 1.0], [42500.0, 1.0], [43300.0, 1.0], [44900.0, 3.0], [46500.0, 1.0], [45700.0, 1.0], [49700.0, 1.0], [200.0, 10302.0], [52900.0, 1.0], [53700.0, 1.0], [58500.0, 2.0], [60100.0, 1.0], [69000.0, 2.0], [300.0, 1284.0], [85000.0, 1.0], [88200.0, 1.0], [400.0, 332.0], [500.0, 890.0], [600.0, 617.0], [700.0, 578.0], [800.0, 597.0], [900.0, 296.0], [1000.0, 376.0], [1100.0, 383.0], [1200.0, 635.0], [1300.0, 179.0], [1400.0, 97.0], [1500.0, 108.0], [1600.0, 101.0], [1700.0, 77.0], [1800.0, 84.0], [1900.0, 88.0], [2000.0, 54.0], [2100.0, 48.0], [2200.0, 434.0], [2300.0, 36.0], [2400.0, 17.0], [2500.0, 10.0], [2600.0, 9.0], [2800.0, 15.0], [2700.0, 7.0], [2900.0, 12.0], [3000.0, 19.0], [3100.0, 29.0], [3300.0, 40.0], [3200.0, 32.0], [3400.0, 29.0], [3500.0, 26.0], [3600.0, 14.0], [3700.0, 17.0], [3800.0, 11.0], [3900.0, 6.0], [4000.0, 5.0], [4200.0, 4.0], [4300.0, 7.0], [4100.0, 3.0], [66500.0, 1.0], [4400.0, 2.0], [4500.0, 6.0], [4600.0, 2.0], [4700.0, 3.0], [4800.0, 1.0], [4900.0, 5.0], [5100.0, 1.0], [5000.0, 3.0], [5200.0, 4.0], [5300.0, 2.0], [82500.0, 1.0], [85700.0, 1.0], [5600.0, 4.0], [5400.0, 2.0], [5500.0, 4.0], [5800.0, 9.0], [5700.0, 18.0], [93700.0, 3.0], [92100.0, 1.0], [5900.0, 14.0], [6000.0, 14.0], [6100.0, 20.0], [6200.0, 12.0], [6300.0, 19.0], [6600.0, 6.0], [6400.0, 14.0], [6500.0, 5.0], [104900.0, 1.0], [6700.0, 3.0], [6800.0, 5.0], [7100.0, 4.0], [7000.0, 1.0], [7300.0, 1.0], [7400.0, 4.0], [7200.0, 1.0], [7600.0, 1.0], [7500.0, 1.0], [7900.0, 1.0], [8100.0, 3.0], [8600.0, 3.0], [8200.0, 1.0], [134200.0, 1.0], [147000.0, 1.0], [9600.0, 1.0], [9400.0, 1.0], [10200.0, 1.0], [10600.0, 1.0], [10400.0, 2.0], [10800.0, 3.0], [11200.0, 4.0], [11000.0, 2.0], [11400.0, 9.0], [11600.0, 3.0], [12000.0, 6.0], [12200.0, 5.0], [11800.0, 6.0], [191800.0, 1.0], [12600.0, 2.0], [12400.0, 3.0], [13000.0, 3.0], [12800.0, 2.0], [13200.0, 2.0], [13600.0, 4.0], [13800.0, 3.0], [13400.0, 4.0], [14000.0, 3.0], [14200.0, 3.0], [14800.0, 1.0], [14600.0, 2.0], [15200.0, 4.0], [15000.0, 2.0], [15800.0, 6.0], [15600.0, 3.0], [15400.0, 1.0], [16200.0, 3.0], [16000.0, 2.0], [17200.0, 7.0], [16400.0, 4.0], [16800.0, 2.0], [17600.0, 3.0], [18400.0, 3.0], [19200.0, 2.0], [18800.0, 1.0], [19600.0, 2.0], [20000.0, 2.0], [20800.0, 2.0], [21200.0, 2.0], [21600.0, 3.0], [22400.0, 6.0], [22000.0, 2.0], [22800.0, 4.0], [23200.0, 2.0], [24400.0, 1.0], [23600.0, 2.0], [24000.0, 1.0], [25600.0, 1.0], [26400.0, 9.0], [26000.0, 4.0], [27200.0, 4.0], [27600.0, 6.0], [26800.0, 4.0], [28000.0, 4.0], [28400.0, 12.0], [28800.0, 4.0], [30400.0, 1.0], [44800.0, 2.0], [43200.0, 2.0], [45600.0, 2.0], [48000.0, 3.0], [52000.0, 3.0], [60000.0, 2.0], [67200.0, 1.0], [75200.0, 1.0], [81600.0, 1.0], [83200.0, 1.0], [89600.0, 2.0], [131200.0, 1.0], [67100.0, 1.0], [68700.0, 1.0], [71900.0, 1.0], [92700.0, 1.0], [99100.0, 1.0], [107100.0, 1.0], [127900.0, 1.0], [41900.0, 1.0], [43500.0, 1.0], [44300.0, 2.0], [46700.0, 1.0], [45900.0, 1.0], [48300.0, 1.0], [50700.0, 1.0], [51500.0, 1.0], [57100.0, 1.0], [60300.0, 1.0], [65100.0, 1.0], [67800.0, 2.0], [69400.0, 1.0], [93400.0, 1.0], [103000.0, 3.0], [92500.0, 1.0], [97300.0, 1.0], [106900.0, 1.0], [16500.0, 2.0], [16900.0, 4.0], [17300.0, 2.0], [18100.0, 4.0], [19300.0, 1.0], [18500.0, 3.0], [18900.0, 1.0], [20100.0, 1.0], [20900.0, 2.0], [21300.0, 3.0], [22100.0, 5.0], [22500.0, 2.0], [23300.0, 2.0], [22900.0, 1.0], [24100.0, 2.0], [24500.0, 2.0], [25300.0, 1.0], [24900.0, 2.0], [26100.0, 8.0], [26500.0, 10.0], [25700.0, 1.0], [26900.0, 2.0], [27300.0, 6.0], [28100.0, 16.0], [28500.0, 18.0], [27700.0, 3.0], [28900.0, 9.0], [29700.0, 2.0], [31300.0, 1.0], [30900.0, 1.0], [32500.0, 2.0], [33800.0, 1.0], [34600.0, 1.0], [36200.0, 1.0], [42600.0, 1.0], [43400.0, 1.0], [46600.0, 1.0], [45800.0, 2.0], [48200.0, 2.0], [47400.0, 1.0], [54600.0, 2.0], [60200.0, 1.0], [61000.0, 1.0], [65000.0, 1.0], [69200.0, 1.0], [82000.0, 1.0], [98000.0, 1.0], [101200.0, 1.0], [110800.0, 1.0], [69100.0, 2.0], [91500.0, 1.0], [97900.0, 1.0], [38900.0, 2.0], [41300.0, 1.0], [42900.0, 1.0], [44500.0, 1.0], [43700.0, 3.0], [46900.0, 1.0], [45300.0, 2.0], [47700.0, 2.0], [56500.0, 1.0], [60500.0, 1.0], [87400.0, 2.0], [90600.0, 1.0], [98600.0, 1.0], [75300.0, 1.0], [86500.0, 1.0], [89700.0, 1.0], [91300.0, 1.0], [99300.0, 1.0], [123300.0, 1.0], [8300.0, 2.0], [8700.0, 1.0], [8500.0, 1.0], [9100.0, 1.0], [9500.0, 1.0], [9300.0, 2.0], [10100.0, 1.0], [10700.0, 3.0], [11100.0, 4.0], [10900.0, 2.0], [11500.0, 6.0], [11700.0, 5.0], [11900.0, 7.0], [12100.0, 4.0], [12700.0, 5.0], [12300.0, 3.0], [12500.0, 1.0], [12900.0, 2.0], [13300.0, 3.0], [13500.0, 3.0], [13700.0, 4.0], [14300.0, 3.0], [14100.0, 2.0], [13900.0, 1.0], [14500.0, 2.0], [15100.0, 2.0], [14900.0, 2.0], [15300.0, 2.0], [15700.0, 2.0], [15500.0, 1.0], [16300.0, 4.0], [16100.0, 1.0], [17000.0, 2.0], [17400.0, 1.0], [16600.0, 1.0], [17800.0, 1.0], [20200.0, 2.0], [21000.0, 3.0], [20600.0, 1.0], [22200.0, 2.0], [23400.0, 2.0], [22600.0, 3.0], [23000.0, 2.0], [24200.0, 2.0], [23800.0, 2.0], [24600.0, 3.0], [25400.0, 2.0], [25000.0, 1.0], [26200.0, 4.0], [26600.0, 13.0], [25800.0, 1.0], [27000.0, 3.0], [27400.0, 11.0], [27800.0, 4.0], [28200.0, 21.0], [28600.0, 7.0], [29000.0, 5.0], [29800.0, 1.0], [31000.0, 1.0], [32200.0, 1.0], [32600.0, 2.0], [31800.0, 1.0], [34000.0, 1.0], [34800.0, 2.0], [38800.0, 3.0], [37200.0, 1.0], [41200.0, 1.0], [43600.0, 2.0], [45200.0, 1.0], [46000.0, 1.0], [47600.0, 3.0], [48400.0, 1.0], [50000.0, 1.0], [50800.0, 1.0], [53200.0, 1.0], [60400.0, 1.0], [62000.0, 1.0], [63600.0, 1.0], [68000.0, 3.0], [69600.0, 2.0], [71200.0, 1.0], [92000.0, 1.0], [109600.0, 1.0], [67900.0, 1.0], [79100.0, 1.0], [90300.0, 1.0], [130300.0, 1.0], [34300.0, 1.0], [35900.0, 1.0], [37500.0, 1.0], [40700.0, 1.0], [43900.0, 5.0], [47100.0, 1.0], [46300.0, 1.0], [45500.0, 1.0], [48700.0, 1.0], [49500.0, 1.0], [50300.0, 1.0], [51100.0, 1.0], [51900.0, 1.0], [53500.0, 1.0], [58300.0, 1.0], [59900.0, 1.0], [61500.0, 1.0], [63100.0, 1.0], [70200.0, 2.0], [73400.0, 3.0], [107000.0, 2.0], [69300.0, 2.0], [85300.0, 1.0], [110900.0, 1.0], [131800.0, 1.0], [16700.0, 1.0], [17100.0, 3.0], [17500.0, 5.0], [17900.0, 2.0], [19100.0, 1.0], [19500.0, 1.0], [19900.0, 1.0], [21500.0, 1.0], [20700.0, 1.0], [22300.0, 1.0], [21900.0, 3.0], [23100.0, 6.0], [22700.0, 4.0], [23500.0, 1.0], [24300.0, 1.0], [23900.0, 1.0], [25100.0, 1.0], [25500.0, 1.0], [26300.0, 7.0], [25900.0, 2.0], [27100.0, 7.0], [26700.0, 13.0], [27500.0, 1.0], [27900.0, 5.0], [28300.0, 16.0], [28700.0, 6.0], [29900.0, 1.0], [30700.0, 1.0], [30300.0, 1.0], [31100.0, 1.0], [32300.0, 1.0], [31900.0, 1.0], [38200.0, 2.0], [43800.0, 2.0], [44600.0, 2.0], [47000.0, 2.0], [45400.0, 2.0], [46200.0, 3.0], [47800.0, 1.0], [50200.0, 1.0], [49400.0, 2.0], [54200.0, 4.0], [53400.0, 1.0], [56600.0, 1.0], [59000.0, 2.0], [61400.0, 1.0], [66800.0, 1.0], [68400.0, 1.0], [73200.0, 1.0], [84400.0, 1.0], [121200.0, 1.0]], "isOverall": false, "label": "Domain Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 191800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1677.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 91267.0, "series": [{"data": [[0.0, 91267.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 3893.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1677.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 29432.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 6.691180921251728, "minX": 1.7466855E12, "maxY": 2991.822571588997, "series": [{"data": [[1.74668562E12, 2707.5020576131697], [1.74696186E12, 30.639557266602505], [1.74698286E12, 7.255039439088518], [1.7466855E12, 2991.822571588997], [1.74696174E12, 69.53687062243961], [1.74698298E12, 7.172562141491395], [1.74668568E12, 2689.0], [1.74698292E12, 6.691180921251728], [1.7469831E12, 6.945558739255015], [1.74668556E12, 2851.8751497723515], [1.7469618E12, 34.17694217440769], [1.74698304E12, 7.115254035380303]], "isOverall": false, "label": "NPF", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7469831E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 7.636363636363636, "minX": 1.0, "maxY": 29078.357142857145, "series": [{"data": [[2.0, 13.0], [3.0, 17.166666666666668], [4.0, 7.636363636363636], [5.0, 8.92960971724413], [6.0, 11.958021231880176], [7.0, 17.377746651492686], [8.0, 20.421132361295165], [9.0, 25.185058896466238], [10.0, 23.30419880034275], [11.0, 24.710382513661184], [12.0, 38.20190641247831], [13.0, 34.6321483771252], [14.0, 38.03004291845493], [15.0, 32.84491978609623], [16.0, 54.391891891891895], [17.0, 79.94043321299644], [18.0, 72.85034013605443], [19.0, 95.46766169154228], [20.0, 57.188888888888904], [21.0, 74.3151515151515], [22.0, 78.83934426229504], [23.0, 78.12729234088457], [24.0, 78.39081145584704], [25.0, 79.60079200452604], [26.0, 80.17771607080863], [27.0, 81.06252821670431], [28.0, 79.80693581780537], [29.0, 82.45941278065638], [30.0, 88.77227722772275], [31.0, 104.73846153846151], [32.0, 105.50877192982459], [33.0, 102.23529411764706], [34.0, 135.05172413793102], [35.0, 150.27027027027026], [36.0, 138.8705882352941], [37.0, 137.48401826484016], [38.0, 141.53892215568865], [39.0, 141.78321678321674], [40.0, 130.28148148148142], [41.0, 162.12790697674416], [42.0, 174.6582278481013], [43.0, 165.6341463414634], [44.0, 168.95757575757568], [45.0, 173.2197802197802], [46.0, 170.1752577319588], [47.0, 176.97802197802196], [48.0, 148.75630252100834], [49.0, 182.98648648648646], [50.0, 167.44137931034473], [51.0, 169.63157894736847], [52.0, 191.67164179104475], [53.0, 200.92727272727276], [54.0, 329.0094786729857], [55.0, 319.79411764705884], [56.0, 252.5151515151515], [57.0, 164.8354430379747], [58.0, 232.37414965986395], [59.0, 197.79333333333324], [60.0, 256.75581395348837], [61.0, 206.8687664041996], [62.0, 207.13983050847452], [63.0, 242.68352059925076], [64.0, 191.69246031746013], [65.0, 238.45639534883716], [66.0, 240.896694214876], [67.0, 233.70866141732287], [68.0, 207.98333333333326], [69.0, 270.91620111731845], [70.0, 224.11314984709486], [71.0, 219.02904564315352], [72.0, 288.7275362318842], [73.0, 272.7482638888891], [74.0, 255.6968152866243], [75.0, 253.91296296296272], [76.0, 241.28220402084858], [77.0, 265.59814814814814], [78.0, 279.4528301886794], [79.0, 253.88223552894263], [80.0, 249.18204697986562], [81.0, 260.0177339901478], [82.0, 286.1796407185631], [83.0, 385.61403508771923], [84.0, 337.6862170087981], [85.0, 305.4759825327512], [86.0, 274.0982142857142], [87.0, 388.05369127516775], [88.0, 317.4831460674158], [89.0, 308.0099009900992], [90.0, 233.72839506172835], [91.0, 578.909090909091], [92.0, 2260.3333333333335], [93.0, 2247.0], [94.0, 2256.0], [95.0, 2249.5], [96.0, 2257.5], [97.0, 2246.0], [98.0, 3408.0], [99.0, 3406.6666666666665], [100.0, 2245.0], [101.0, 2259.6666666666665], [102.0, 2615.25], [103.0, 2249.5], [104.0, 2250.0], [105.0, 2241.5], [106.0, 2249.0], [107.0, 2256.0], [108.0, 2246.0], [109.0, 2240.5], [110.0, 2247.0], [111.0, 2251.5], [112.0, 2261.294117647059], [113.0, 2260.0], [114.0, 2261.75], [115.0, 2254.5], [116.0, 2246.3333333333335], [117.0, 2255.0], [118.0, 2258.0], [119.0, 2261.0], [120.0, 2248.3333333333335], [121.0, 2255.6666666666665], [122.0, 2243.0], [123.0, 3125.0], [124.0, 2251.6666666666665], [125.0, 2258.0], [126.0, 2258.0], [127.0, 2257.5], [128.0, 2278.0], [129.0, 2258.2], [130.0, 2246.5], [131.0, 2261.6666666666665], [132.0, 2271.0], [133.0, 2261.0], [134.0, 2259.3333333333335], [135.0, 2264.5], [137.0, 2256.5], [138.0, 2260.6666666666665], [139.0, 2264.5833333333335], [140.0, 2260.1428571428573], [141.0, 2273.0], [142.0, 2274.571428571429], [143.0, 2251.0], [144.0, 2261.4], [145.0, 2356.4], [146.0, 2253.6666666666665], [147.0, 2272.0], [148.0, 2277.0], [149.0, 2270.75], [150.0, 2260.6666666666665], [151.0, 2508.833333333333], [152.0, 2260.25], [153.0, 2994.0], [154.0, 2264.0], [155.0, 2838.833333333333], [156.0, 2266.6666666666665], [157.0, 2273.5], [158.0, 2273.0], [159.0, 2269.3333333333335], [160.0, 2262.2], [161.0, 2263.5], [162.0, 2262.0], [163.0, 2270.3333333333335], [164.0, 2274.0], [165.0, 2275.0], [166.0, 2271.6], [167.0, 2264.25], [168.0, 2274.0], [169.0, 2272.4285714285716], [170.0, 2263.2], [171.0, 2269.25], [172.0, 2277.0], [2804.0, 964.6666666666666], [2792.0, 604.0], [2808.0, 505.5], [2812.0, 630.75], [2752.0, 8384.452054794516], [2754.0, 1284.9545454545453], [2756.0, 88.75], [2758.0, 74.0], [2760.0, 7654.0], [2762.0, 26033.100000000002], [2764.0, 49.45454545454545], [2766.0, 54.90909090909091], [2768.0, 84.07142857142857], [2770.0, 129.12499999999997], [2772.0, 151.16666666666669], [2774.0, 748.5], [2776.0, 131.0], [2778.0, 138.5], [2780.0, 212.08333333333334], [2782.0, 267.2857142857143], [2814.0, 839.5365853658539], [2810.0, 486.9166666666667], [2806.0, 246.0], [2802.0, 6486.0], [2800.0, 417.375], [2798.0, 1270.7096774193549], [2796.0, 2332.4166666666665], [2794.0, 1889.5714285714287], [2790.0, 332.0], [2788.0, 307.09375], [2786.0, 223.14285714285714], [2784.0, 327.08333333333337], [2690.0, 6141.439999999999], [2692.0, 3915.0], [2694.0, 51.0], [2696.0, 50.631578947368425], [2698.0, 57.5], [2700.0, 65.0], [2702.0, 77.25], [2704.0, 116.66666666666666], [2706.0, 5293.566137566137], [2708.0, 51.0], [2710.0, 65.25], [2712.0, 104.0], [2714.0, 111.92857142857143], [2718.0, 51.75], [2750.0, 1368.4333333333332], [2748.0, 86.0], [2746.0, 74.5], [2744.0, 50.0], [2742.0, 2299.9], [2740.0, 29078.357142857145], [2738.0, 49.333333333333336], [2736.0, 50.0], [2734.0, 64.22222222222223], [2732.0, 50.411764705882355], [2730.0, 28045.92], [2728.0, 129.0909090909091], [2726.0, 96.0], [2724.0, 77.33333333333333], [2722.0, 52.21212121212121], [2720.0, 51.0], [2932.0, 976.8333333333333], [2920.0, 9055.58928571428], [2936.0, 729.6363636363636], [2940.0, 3087.8214285714284], [2880.0, 2985.090909090909], [2882.0, 2949.933333333334], [2884.0, 5038.272727272725], [2886.0, 767.0], [2888.0, 12611.142857142855], [2890.0, 893.25], [2892.0, 786.9999999999999], [2894.0, 1104.5200000000002], [2896.0, 939.0], [2898.0, 765.1428571428572], [2900.0, 2635.151515151515], [2902.0, 2462.777777777778], [2904.0, 1846.6643356643358], [2906.0, 1078.5000000000002], [2908.0, 1141.4], [2910.0, 2865.58064516129], [2942.0, 1022.0833333333333], [2938.0, 1778.6], [2934.0, 656.6666666666666], [2930.0, 4045.549295774648], [2928.0, 3075.8333333333335], [2926.0, 5482.372549019608], [2924.0, 1594.0], [2922.0, 778.125], [2918.0, 8160.499999999999], [2916.0, 1175.8750000000002], [2914.0, 10068.999999999998], [2912.0, 6761.666666666668], [2816.0, 613.0], [2818.0, 1843.3181818181818], [2820.0, 735.7608695652174], [2822.0, 500.0], [2824.0, 745.6666666666666], [2826.0, 529.6], [2828.0, 1975.421052631579], [2830.0, 523.6666666666666], [2832.0, 956.3], [2834.0, 386.0], [2836.0, 385.0], [2838.0, 1531.8799999999999], [2840.0, 3021.1666666666665], [2842.0, 772.1999999999999], [2844.0, 716.375], [2846.0, 1507.5], [2878.0, 3384.4749999999985], [2876.0, 11991.75], [2874.0, 3636.753086419754], [2872.0, 6289.931034482759], [2870.0, 693.0], [2868.0, 1085.0], [2866.0, 665.0], [2864.0, 3083.4444444444443], [2862.0, 656.8], [2860.0, 7363.142857142857], [2858.0, 610.0], [2856.0, 1036.5384615384617], [2854.0, 978.0000000000001], [2852.0, 2459.958333333333], [2850.0, 478.0], [2848.0, 1557.0399999999997], [2948.0, 486.5], [2960.0, 1136.4594594594596], [3000.0, 7109.537108301274], [2944.0, 944.6666666666666], [2946.0, 2450.5], [2950.0, 7061.3214285714275], [2952.0, 20249.0], [2954.0, 541.6], [2956.0, 11638.0], [2958.0, 2290.6666666666665], [2962.0, 761.0], [2964.0, 782.7499999999999], [2966.0, 1806.0540540540546], [2968.0, 1130.3846153846155], [2970.0, 1122.1153846153845], [2972.0, 5439.117647058824], [2974.0, 1146.0], [2998.0, 2239.1428571428573], [2996.0, 5794.090909090908], [2994.0, 2889.4444444444443], [2992.0, 3155.7530864197543], [2990.0, 375.0], [2988.0, 1158.8181818181818], [2986.0, 3059.8421052631575], [2984.0, 1668.5], [2982.0, 1564.6999999999998], [2980.0, 3644.6785714285716], [2978.0, 4060.5882352941167], [2976.0, 4387.114942528734], [2805.0, 655.0], [2815.0, 800.6666666666666], [2753.0, 8557.666666666668], [2755.0, 96.5], [2757.0, 49.0], [2759.0, 76.0], [2761.0, 291.53000000000003], [2763.0, 51.0], [2765.0, 51.0], [2767.0, 78.71428571428571], [2769.0, 55.5], [2771.0, 115.44444444444444], [2773.0, 202.8], [2775.0, 120.81818181818181], [2777.0, 227.95], [2779.0, 313.3333333333333], [2781.0, 220.14285714285714], [2783.0, 2210.826086956521], [2813.0, 731.5555555555554], [2811.0, 684.9166666666666], [2809.0, 8641.666666666666], [2807.0, 1279.0], [2803.0, 576.5], [2801.0, 270.0], [2799.0, 293.5], [2797.0, 498.0], [2795.0, 353.5], [2793.0, 347.0], [2791.0, 449.83333333333337], [2789.0, 7745.181818181818], [2787.0, 462.8888888888889], [2785.0, 295.0], [2751.0, 1984.8695652173915], [2689.0, 7736.2], [2691.0, 5937.08], [2693.0, 4501.666666666667], [2695.0, 50.0], [2697.0, 6167.901408450702], [2699.0, 65.0], [2701.0, 79.0], [2703.0, 94.33333333333333], [2705.0, 117.0], [2707.0, 48.916666666666664], [2709.0, 52.5], [2711.0, 83.875], [2713.0, 103.66666666666667], [2717.0, 50.0], [2715.0, 5894.562091503269], [2719.0, 8808.209302325582], [2749.0, 96.6060606060606], [2747.0, 83.5], [2745.0, 63.666666666666664], [2743.0, 11441.75], [2741.0, 97.5], [2739.0, 55.414285714285704], [2737.0, 49.0], [2735.0, 5702.071428571428], [2733.0, 49.5], [2731.0, 51.5], [2729.0, 1584.3333333333328], [2727.0, 111.23076923076923], [2725.0, 90.66666666666666], [2723.0, 70.0], [2721.0, 49.0], [2933.0, 22545.0], [2943.0, 1406.5], [2881.0, 15853.0], [2883.0, 2064.6666666666665], [2885.0, 1120.5], [2887.0, 3153.260869565217], [2889.0, 3196.9375000000005], [2891.0, 1588.0], [2893.0, 1678.688888888889], [2895.0, 6614.320754716982], [2897.0, 997.6666666666666], [2899.0, 7195.5294117647045], [2901.0, 4441.2368421052615], [2903.0, 3251.312500000001], [2905.0, 5909.839506172838], [2907.0, 6655.818181818182], [2909.0, 772.8333333333334], [2911.0, 5266.605263157896], [2941.0, 5585.794117647059], [2939.0, 4793.457142857144], [2937.0, 2209.3235294117644], [2935.0, 1573.6666666666667], [2931.0, 915.9333333333333], [2929.0, 2297.9999999999995], [2927.0, 5722.21875], [2925.0, 616.9999999999999], [2923.0, 4397.54411764706], [2921.0, 6426.416666666667], [2919.0, 4905.470588235294], [2917.0, 13345.0], [2915.0, 9370.375], [2913.0, 6915.449999999998], [2879.0, 978.6774193548387], [2817.0, 548.0], [2819.0, 523.8529411764706], [2821.0, 18140.75], [2823.0, 1787.0625], [2825.0, 562.1666666666666], [2827.0, 733.0], [2829.0, 2375.5263157894738], [2831.0, 1532.857142857143], [2833.0, 865.6666666666666], [2835.0, 11836.0], [2837.0, 856.9032258064516], [2839.0, 552.3333333333334], [2841.0, 2442.0], [2843.0, 1220.3333333333333], [2845.0, 1072.3793103448274], [2847.0, 2902.147058823529], [2877.0, 3896.5000000000005], [2875.0, 2462.903846153846], [2873.0, 1286.255813953488], [2871.0, 1163.2608695652175], [2869.0, 9680.730769230768], [2867.0, 786.6249999999999], [2865.0, 752.625], [2863.0, 2752.0000000000005], [2861.0, 3103.4545454545455], [2859.0, 3129.092592592593], [2857.0, 590.125], [2855.0, 876.1666666666666], [2853.0, 3372.111111111111], [2851.0, 1346.4444444444443], [2849.0, 3925.7692307692314], [2955.0, 6439.437500000001], [2993.0, 1502.9629629629633], [2997.0, 2956.9134199134205], [2945.0, 761.6999999999998], [2947.0, 997.0], [2949.0, 4274.242424242425], [2951.0, 2320.1428571428573], [2953.0, 6421.454545454545], [2957.0, 2970.4], [2959.0, 773.7916666666666], [2961.0, 1121.5], [2963.0, 592.3333333333334], [2965.0, 1141.62], [2967.0, 6082.090909090909], [2969.0, 1030.6666666666667], [2971.0, 1243.8333333333333], [2973.0, 1182.9], [2975.0, 1401.5185185185187], [2999.0, 3105.202166064981], [2995.0, 4080.4838709677424], [2991.0, 1131.5], [2989.0, 2234.7307692307686], [2987.0, 1230.6666666666667], [2985.0, 908.5], [2983.0, 3122.166666666666], [2981.0, 3543.5], [2979.0, 1317.0], [2977.0, 3547.8], [1.0, 10.5]], "isOverall": false, "label": "Domain Request", "isController": false}, {"data": [[214.57775067514663, 345.1136541827392]], "isOverall": false, "label": "Domain Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 3000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 51.25, "minX": 1.7466855E12, "maxY": 2195161.75, "series": [{"data": [[1.74668562E12, 95237.75], [1.74696186E12, 649620.0833333334], [1.74698286E12, 1939414.75], [1.7466855E12, 448264.01666666666], [1.74696174E12, 1087621.4333333333], [1.74698298E12, 2188232.0], [1.74668568E12, 3268.75], [1.74698292E12, 2160120.75], [1.7469831E12, 1323320.75], [1.74668556E12, 541588.5833333334], [1.7469618E12, 1578161.4333333333], [1.74698304E12, 2195161.75]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.74668562E12, 1492.4], [1.74696186E12, 5629.3], [1.74698286E12, 30407.65], [1.7466855E12, 6806.0], [1.74696174E12, 7628.05], [1.74698298E12, 34308.8], [1.74668568E12, 51.25], [1.74698292E12, 33868.05], [1.7469831E12, 20748.05], [1.74668556E12, 8464.45], [1.7469618E12, 14694.4], [1.74698304E12, 34417.45]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7469831E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 14.965517241379322, "minX": 1.7466855E12, "maxY": 7736.2, "series": [{"data": [[1.74668562E12, 4407.946502057617], [1.74696186E12, 186.80786814244448], [1.74698286E12, 17.838063776713938], [1.7466855E12, 5138.824536777091], [1.74696174E12, 241.28340161226356], [1.74698298E12, 16.364543499043904], [1.74668568E12, 7736.2], [1.74698292E12, 15.170631317716808], [1.7469831E12, 14.965517241379322], [1.74668556E12, 3210.30984902947], [1.7469618E12, 105.94263990896863], [1.74698304E12, 16.442194293882917]], "isOverall": false, "label": "Domain Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7469831E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 13.398280802292293, "minX": 1.7466855E12, "maxY": 7735.5599999999995, "series": [{"data": [[1.74668562E12, 4172.019204389574], [1.74696186E12, 18.04752165543799], [1.74698286E12, 15.974516281264691], [1.7466855E12, 2702.773441886581], [1.74696174E12, 38.047442843927705], [1.74698298E12, 14.794634321223693], [1.74668568E12, 7735.5599999999995], [1.74698292E12, 13.626959627141284], [1.7469831E12, 13.398280802292293], [1.74668556E12, 1935.6110711718172], [1.7469618E12, 24.34286748732807], [1.74698304E12, 14.909821907201211]], "isOverall": false, "label": "Domain Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7469831E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1.6045845272206307, "minX": 1.7466855E12, "maxY": 3387.6198764738792, "series": [{"data": [[1.74668562E12, 343.58436213991797], [1.74696186E12, 170.7866939364773], [1.74698286E12, 2.5785747994336945], [1.7466855E12, 3387.6198764738792], [1.74696174E12, 194.200409673582], [1.74698298E12, 1.821582217973233], [1.74668568E12, 541.5199999999999], [1.74698292E12, 1.7366382180255333], [1.7469831E12, 1.6045845272206307], [1.74668556E12, 826.5156961418666], [1.7469618E12, 82.1927692148549], [1.74698304E12, 1.8986836619214995]], "isOverall": false, "label": "Domain Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7469831E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 4.0, "minX": 1.7466855E12, "maxY": 191853.0, "series": [{"data": [[1.74668562E12, 152195.0], [1.74696186E12, 524.0], [1.74698286E12, 1182.0], [1.7466855E12, 60545.0], [1.74696174E12, 2297.0], [1.74698298E12, 1036.0], [1.74668568E12, 191853.0], [1.74698292E12, 1038.0], [1.7469831E12, 1032.0], [1.74668556E12, 110961.0], [1.7469618E12, 1967.0], [1.74698304E12, 1040.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.74668562E12, 48.0], [1.74696186E12, 46.0], [1.74698286E12, 4.0], [1.7466855E12, 238.0], [1.74696174E12, 47.0], [1.74698298E12, 4.0], [1.74668568E12, 51.0], [1.74698292E12, 4.0], [1.7469831E12, 4.0], [1.74668556E12, 47.0], [1.7469618E12, 46.0], [1.74698304E12, 5.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.74668562E12, 120.0], [1.74696186E12, 49.0], [1.74698286E12, 34.0], [1.7466855E12, 11428.900000000003], [1.74696174E12, 543.8000000000002], [1.74698298E12, 29.0], [1.74668568E12, 129.40000000000026], [1.74698292E12, 27.0], [1.7469831E12, 29.0], [1.74668556E12, 1953.0], [1.7469618E12, 127.0], [1.74698304E12, 32.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.74668562E12, 122722.17000000007], [1.74696186E12, 152.0], [1.74698286E12, 112.0], [1.7466855E12, 38872.44], [1.74696174E12, 1187.5799999999972], [1.74698298E12, 117.0], [1.74668568E12, 191853.0], [1.74698292E12, 91.56000000000131], [1.7469831E12, 89.0], [1.74668556E12, 53995.99999999982], [1.7469618E12, 588.9299999999985], [1.74698304E12, 108.09999999999854]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.74668562E12, 68.5], [1.74696186E12, 48.0], [1.74698286E12, 10.0], [1.7466855E12, 1020.0], [1.74696174E12, 120.0], [1.74698298E12, 9.0], [1.74668568E12, 57.0], [1.74698292E12, 10.0], [1.7469831E12, 9.0], [1.74668556E12, 541.0], [1.7469618E12, 48.0], [1.74698304E12, 10.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.74668562E12, 160.0], [1.74696186E12, 145.0], [1.74698286E12, 55.0], [1.7466855E12, 17584.149999999998], [1.74696174E12, 721.5999999999985], [1.74698298E12, 43.0], [1.74668568E12, 134358.59999999986], [1.74698292E12, 38.0], [1.7469831E12, 42.0], [1.74668556E12, 5359.0], [1.7469618E12, 149.0], [1.74698304E12, 45.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7469831E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1.0, "minX": 2.0, "maxY": 147076.0, "series": [{"data": [[2.0, 108.0], [3.0, 54.0], [4.0, 50.5], [5.0, 103.0], [6.0, 52.0], [7.0, 50.0], [10.0, 51.0], [11.0, 98.0], [15.0, 97.0], [16.0, 58.0], [17.0, 50.0], [19.0, 51.0], [23.0, 1762.0], [25.0, 50.0], [26.0, 11842.0], [29.0, 72.0], [38.0, 99.5], [41.0, 564.0], [40.0, 49.0], [42.0, 51.0], [44.0, 50.0], [48.0, 67.0], [51.0, 13596.0], [53.0, 112.0], [55.0, 1149.0], [58.0, 1306.0], [59.0, 51.0], [63.0, 86.0], [66.0, 1245.5], [67.0, 1182.0], [65.0, 761.0], [70.0, 913.5], [71.0, 708.0], [68.0, 835.0], [69.0, 676.0], [73.0, 861.5], [72.0, 986.0], [75.0, 771.0], [74.0, 680.0], [76.0, 702.5], [78.0, 768.0], [79.0, 681.5], [77.0, 668.5], [82.0, 929.0], [81.0, 492.5], [80.0, 653.0], [83.0, 536.0], [84.0, 782.0], [87.0, 757.5], [86.0, 92.0], [91.0, 51.0], [123.0, 45.0], [162.0, 8.0], [172.0, 1268.5], [171.0, 9.0], [173.0, 15.0], [182.0, 17.0], [188.0, 13.0], [190.0, 12.5], [207.0, 107.0], [206.0, 123.0], [201.0, 11.0], [202.0, 51.0], [200.0, 9.0], [218.0, 11.0], [220.0, 30.0], [219.0, 11.0], [228.0, 120.5], [225.0, 14.0], [239.0, 123.0], [233.0, 16.0], [238.0, 61.5], [235.0, 8.0], [234.0, 10.0], [237.0, 9.0], [243.0, 10.0], [246.0, 22.0], [241.0, 115.5], [245.0, 123.0], [242.0, 11.0], [244.0, 11.0], [252.0, 118.0], [251.0, 58.0], [250.0, 43.0], [253.0, 10.0], [255.0, 12.0], [254.0, 10.0], [248.0, 23.0], [269.0, 8.0], [271.0, 10.0], [270.0, 10.0], [265.0, 12.5], [267.0, 10.0], [266.0, 11.0], [257.0, 40.0], [256.0, 14.0], [259.0, 15.0], [258.0, 15.5], [264.0, 10.0], [260.0, 12.0], [261.0, 14.0], [262.0, 12.0], [263.0, 13.0], [275.0, 8.0], [280.0, 8.0], [279.0, 10.0], [273.0, 9.0], [272.0, 11.0], [283.0, 9.0], [281.0, 8.0], [282.0, 11.0], [278.0, 8.0], [277.0, 10.0], [276.0, 8.0], [286.0, 8.0], [287.0, 9.0], [285.0, 9.0], [284.0, 9.0], [274.0, 9.0], [301.0, 119.0], [297.0, 11.0], [300.0, 12.0], [302.0, 10.0], [299.0, 12.0], [298.0, 48.0], [296.0, 14.0], [303.0, 48.0], [292.0, 10.0], [295.0, 9.0], [294.0, 8.0], [293.0, 8.0], [291.0, 10.0], [288.0, 8.0], [289.0, 11.0], [290.0, 18.5], [318.0, 46.0], [308.0, 47.0], [314.0, 47.0], [313.0, 48.0], [315.0, 47.0], [306.0, 12.0], [307.0, 10.0], [316.0, 47.0], [317.0, 11.0], [311.0, 10.0], [305.0, 47.0], [304.0, 11.0], [309.0, 12.0], [319.0, 46.5], [312.0, 47.0], [310.0, 11.0], [321.0, 48.0], [330.0, 10.0], [331.0, 47.0], [320.0, 47.0], [325.0, 47.0], [324.0, 47.0], [333.0, 47.0], [323.0, 47.0], [322.0, 48.0], [327.0, 47.0], [334.0, 11.0], [339.0, 48.0], [347.0, 48.0], [337.0, 48.0], [343.0, 10.0], [338.0, 8.0], [354.0, 106.5], [359.0, 12.0], [358.0, 19.0], [365.0, 9.0], [352.0, 8.0], [364.0, 8.0], [356.0, 24.0], [376.0, 48.0], [381.0, 7.0], [370.0, 8.0], [398.0, 7.0], [384.0, 25.0], [442.0, 11.0], [492.0, 20.0], [590.0, 48.0], [667.0, 48.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[3.0, 147076.0], [7.0, 1.0], [13.0, 2264.0], [28.0, 2251.0], [34.0, 2261.0], [38.0, 2258.0], [39.0, 2274.0], [41.0, 1.0], [44.0, 2261.5], [47.0, 2267.0], [48.0, 29730.0], [49.0, 2258.0], [51.0, 2257.0], [50.0, 2266.0], [53.0, 104.0], [58.0, 30743.0], [65.0, 36265.0], [68.0, 30496.0], [71.0, 65050.0], [70.0, 68782.0], [72.0, 32208.0], [73.0, 69210.0], [75.0, 73267.0], [74.0, 61292.0], [77.0, 67211.5], [76.0, 30807.0], [79.0, 67862.5], [80.0, 69577.5], [83.0, 54625.0], [84.0, 58557.0], [87.0, 60068.0], [172.0, 28127.0], [182.0, 27706.5], [207.0, 202.0], [206.0, 234.0], [218.0, 206.0], [220.0, 226.0], [228.0, 233.0], [239.0, 227.0], [233.0, 227.0], [243.0, 185.0], [246.0, 214.0], [241.0, 217.0], [245.0, 225.0], [252.0, 233.0], [251.0, 226.0], [271.0, 205.0], [270.0, 227.0], [265.0, 223.0], [267.0, 231.0], [257.0, 239.0], [275.0, 231.0], [280.0, 231.0], [279.0, 235.0], [273.0, 214.0], [272.0, 93.5], [283.0, 233.0], [278.0, 220.0], [277.0, 227.0], [286.0, 230.0], [274.0, 224.5], [301.0, 211.0], [297.0, 196.0], [300.0, 207.0], [302.0, 226.0], [299.0, 215.0], [298.0, 96.0], [296.0, 221.0], [303.0, 94.0], [292.0, 205.0], [295.0, 95.0], [293.0, 97.0], [291.0, 229.0], [288.0, 230.0], [289.0, 232.0], [318.0, 162.0], [308.0, 177.0], [314.0, 95.0], [313.0, 95.0], [315.0, 94.0], [306.0, 95.0], [307.0, 95.0], [316.0, 94.0], [311.0, 95.0], [305.0, 98.0], [304.0, 93.0], [309.0, 214.5], [319.0, 95.0], [312.0, 94.0], [310.0, 223.0], [321.0, 94.0], [330.0, 204.0], [331.0, 95.0], [320.0, 94.0], [325.0, 94.0], [324.0, 95.0], [333.0, 93.0], [323.0, 94.0], [322.0, 95.0], [327.0, 95.0], [334.0, 94.0], [339.0, 95.0], [347.0, 95.0], [337.0, 95.0], [343.0, 94.0], [354.0, 194.0], [376.0, 94.0], [590.0, 94.0], [667.0, 94.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 667.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 2.0, "maxY": 13470.0, "series": [{"data": [[2.0, 108.0], [3.0, 53.5], [4.0, 50.0], [5.0, 52.0], [6.0, 51.5], [7.0, 49.5], [10.0, 50.0], [11.0, 50.0], [15.0, 51.0], [16.0, 56.5], [17.0, 50.0], [19.0, 51.0], [23.0, 1107.0], [25.0, 50.0], [26.0, 11485.0], [29.0, 66.0], [38.0, 50.5], [41.0, 403.0], [40.0, 49.0], [42.0, 51.0], [44.0, 50.0], [48.0, 63.0], [51.0, 13470.0], [53.0, 110.0], [55.0, 908.0], [58.0, 831.0], [59.0, 50.0], [63.0, 81.0], [66.0, 892.0], [67.0, 816.0], [65.0, 403.0], [70.0, 564.0], [71.0, 387.0], [68.0, 551.0], [69.0, 376.0], [73.0, 556.0], [72.0, 635.0], [75.0, 509.0], [74.0, 410.0], [76.0, 383.0], [78.0, 421.0], [79.0, 381.5], [77.0, 383.0], [82.0, 562.0], [81.0, 257.0], [80.0, 376.0], [83.0, 265.0], [84.0, 546.0], [87.0, 411.0], [86.0, 86.5], [91.0, 51.0], [123.0, 43.0], [162.0, 7.0], [172.0, 774.5], [171.0, 7.0], [173.0, 14.0], [182.0, 16.0], [188.0, 12.0], [190.0, 11.0], [207.0, 103.0], [206.0, 119.0], [201.0, 9.0], [202.0, 50.5], [200.0, 6.0], [218.0, 7.0], [220.0, 26.0], [219.0, 9.0], [228.0, 115.5], [225.0, 13.0], [239.0, 117.0], [233.0, 13.0], [238.0, 58.5], [235.0, 6.0], [234.0, 7.0], [237.0, 6.0], [243.0, 7.0], [246.0, 20.0], [241.0, 109.5], [245.0, 116.0], [242.0, 9.0], [244.0, 7.0], [252.0, 113.0], [251.0, 55.0], [250.0, 41.0], [253.0, 7.0], [255.0, 10.0], [254.0, 7.0], [248.0, 22.0], [269.0, 6.0], [271.0, 8.0], [270.0, 7.0], [265.0, 11.0], [267.0, 7.0], [266.0, 8.0], [257.0, 40.0], [256.0, 12.0], [259.0, 13.0], [258.0, 14.0], [264.0, 7.0], [260.0, 9.0], [261.0, 12.0], [262.0, 11.0], [263.0, 11.0], [275.0, 7.0], [280.0, 6.0], [279.0, 7.0], [273.0, 7.0], [272.0, 8.0], [283.0, 7.0], [281.0, 6.0], [282.0, 9.0], [278.0, 6.0], [277.0, 7.0], [276.0, 6.0], [286.0, 7.0], [287.0, 7.0], [285.0, 7.0], [284.0, 7.0], [274.0, 7.0], [301.0, 112.0], [297.0, 8.0], [300.0, 10.0], [302.0, 7.0], [299.0, 10.0], [298.0, 48.0], [296.0, 12.0], [303.0, 47.0], [292.0, 7.0], [295.0, 7.0], [294.0, 6.0], [293.0, 7.0], [291.0, 7.0], [288.0, 6.0], [289.0, 10.0], [290.0, 17.0], [318.0, 46.0], [308.0, 46.0], [314.0, 47.0], [313.0, 47.0], [315.0, 47.0], [306.0, 8.0], [307.0, 7.0], [316.0, 46.0], [317.0, 10.0], [311.0, 7.0], [305.0, 47.0], [304.0, 8.0], [309.0, 9.0], [319.0, 46.0], [312.0, 47.0], [310.0, 8.0], [321.0, 47.0], [330.0, 7.0], [331.0, 47.0], [320.0, 47.0], [325.0, 47.0], [324.0, 47.0], [333.0, 47.0], [323.0, 47.0], [322.0, 48.0], [327.0, 46.0], [334.0, 7.0], [339.0, 48.0], [347.0, 47.0], [337.0, 47.0], [343.0, 8.0], [338.0, 7.0], [354.0, 99.0], [359.0, 11.0], [358.0, 18.0], [365.0, 8.0], [352.0, 7.0], [364.0, 7.0], [356.0, 23.0], [376.0, 47.0], [381.0, 6.0], [370.0, 7.0], [398.0, 6.0], [384.0, 25.0], [442.0, 9.0], [492.0, 19.0], [590.0, 48.0], [667.0, 48.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[3.0, 0.0], [7.0, 0.0], [13.0, 0.0], [28.0, 0.0], [34.0, 0.0], [38.0, 0.0], [39.0, 0.0], [41.0, 0.0], [44.0, 0.0], [47.0, 0.0], [48.0, 0.0], [49.0, 0.0], [51.0, 0.0], [50.0, 0.0], [53.0, 0.0], [58.0, 0.0], [65.0, 0.0], [68.0, 0.0], [71.0, 0.0], [70.0, 0.0], [72.0, 0.0], [73.0, 0.0], [75.0, 0.0], [74.0, 0.0], [77.0, 0.0], [76.0, 0.0], [79.0, 0.0], [80.0, 0.0], [83.0, 0.0], [84.0, 0.0], [87.0, 0.0], [172.0, 0.0], [182.0, 0.0], [207.0, 0.0], [206.0, 0.0], [218.0, 0.0], [220.0, 0.0], [228.0, 0.0], [239.0, 0.0], [233.0, 0.0], [243.0, 0.0], [246.0, 0.0], [241.0, 0.0], [245.0, 0.0], [252.0, 0.0], [251.0, 0.0], [271.0, 0.0], [270.0, 0.0], [265.0, 0.0], [267.0, 0.0], [257.0, 0.0], [275.0, 0.0], [280.0, 0.0], [279.0, 0.0], [273.0, 0.0], [272.0, 0.0], [283.0, 0.0], [278.0, 0.0], [277.0, 0.0], [286.0, 0.0], [274.0, 0.0], [301.0, 0.0], [297.0, 0.0], [300.0, 0.0], [302.0, 0.0], [299.0, 0.0], [298.0, 0.0], [296.0, 0.0], [303.0, 0.0], [292.0, 0.0], [295.0, 0.0], [293.0, 0.0], [291.0, 0.0], [288.0, 0.0], [289.0, 0.0], [318.0, 0.0], [308.0, 0.0], [314.0, 0.0], [313.0, 0.0], [315.0, 0.0], [306.0, 0.0], [307.0, 0.0], [316.0, 0.0], [311.0, 0.0], [305.0, 0.0], [304.0, 0.0], [309.0, 0.0], [319.0, 0.0], [312.0, 0.0], [310.0, 0.0], [321.0, 0.0], [330.0, 0.0], [331.0, 0.0], [320.0, 0.0], [325.0, 0.0], [324.0, 0.0], [333.0, 0.0], [323.0, 0.0], [322.0, 0.0], [327.0, 0.0], [334.0, 0.0], [339.0, 0.0], [347.0, 0.0], [337.0, 0.0], [343.0, 0.0], [354.0, 0.0], [376.0, 0.0], [590.0, 0.0], [667.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 667.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.4, "minX": 1.74668544E12, "maxY": 321.2, "series": [{"data": [[1.74668562E12, 11.566666666666666], [1.74696174E12, 253.68333333333334], [1.74698298E12, 278.8666666666667], [1.74668568E12, 0.4], [1.74698292E12, 275.4166666666667], [1.74668544E12, 6.216666666666667], [1.74696186E12, 138.11666666666667], [1.74698286E12, 247.28333333333333], [1.7466855E12, 57.45], [1.7469831E12, 168.56666666666666], [1.74668556E12, 65.85], [1.7469618E12, 321.2], [1.74698304E12, 279.8666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7469831E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.7466855E12, "maxY": 279.81666666666666, "series": [{"data": [[1.74668562E12, 12.133333333333333], [1.74696186E12, 45.766666666666666], [1.74698286E12, 247.21666666666667], [1.7466855E12, 55.333333333333336], [1.74696174E12, 62.016666666666666], [1.74698298E12, 278.93333333333334], [1.74668568E12, 0.4166666666666667], [1.74698292E12, 275.35], [1.7469831E12, 168.68333333333334], [1.74668556E12, 68.81666666666666], [1.7469618E12, 119.46666666666667], [1.74698304E12, 279.81666666666666]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.74696186E12, 85.96666666666667], [1.74696174E12, 189.91666666666666], [1.7469618E12, 202.76666666666668]], "isOverall": false, "label": "Non HTTP response code: javax.net.ssl.SSLHandshakeException", "isController": false}, {"data": [[1.74696186E12, 6.55]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}, {"data": [[1.74696186E12, 0.06666666666666667], [1.7466855E12, 0.11666666666666667], [1.74696174E12, 0.16666666666666666], [1.74668556E12, 0.5833333333333334]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}, {"data": [[1.74668562E12, 0.016666666666666666], [1.74696186E12, 0.18333333333333332], [1.7466855E12, 3.9166666666666665], [1.74696174E12, 0.13333333333333333], [1.74668556E12, 0.15]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7469831E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.7466855E12, "maxY": 279.81666666666666, "series": [{"data": [[1.74668562E12, 0.016666666666666666], [1.74696186E12, 92.76666666666667], [1.7466855E12, 4.033333333333333], [1.74696174E12, 190.21666666666667], [1.74668556E12, 0.7333333333333333], [1.7469618E12, 202.76666666666668]], "isOverall": false, "label": "Domain Request-failure", "isController": false}, {"data": [[1.74668562E12, 12.133333333333333], [1.74696186E12, 45.766666666666666], [1.74698286E12, 247.21666666666667], [1.7466855E12, 55.333333333333336], [1.74696174E12, 62.016666666666666], [1.74698298E12, 278.93333333333334], [1.74668568E12, 0.4166666666666667], [1.74698292E12, 275.35], [1.7469831E12, 168.68333333333334], [1.74668556E12, 68.81666666666666], [1.7469618E12, 119.46666666666667], [1.74698304E12, 279.81666666666666]], "isOverall": false, "label": "Domain Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7469831E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.7466855E12, "maxY": 279.81666666666666, "series": [{"data": [[1.74668562E12, 12.133333333333333], [1.74696186E12, 45.766666666666666], [1.74698286E12, 247.21666666666667], [1.7466855E12, 55.333333333333336], [1.74696174E12, 62.016666666666666], [1.74698298E12, 278.93333333333334], [1.74668568E12, 0.4166666666666667], [1.74698292E12, 275.35], [1.7469831E12, 168.68333333333334], [1.74668556E12, 68.81666666666666], [1.7469618E12, 119.46666666666667], [1.74698304E12, 279.81666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.74668562E12, 0.016666666666666666], [1.74696186E12, 92.76666666666667], [1.7466855E12, 4.033333333333333], [1.74696174E12, 190.21666666666667], [1.74668556E12, 0.7333333333333333], [1.7469618E12, 202.76666666666668]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7469831E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 21600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

